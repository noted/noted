=head1 NAME

memcached_get, memcached_get_len, memcached_mget, memcached_mget_len, memcached_fetch - Get a value

=head1 LIBRARY

C Client Library for memcached (libmemcached, -lmemcached)

=head1 SYNOPSIS

  #include <memcached.h>

  memcached_result_st *
  memcached_fetch_result(memcached_st *ptr, 
		       memcached_result_st *result,
		       memcached_return *error);

  char *memcached_get(memcached_st *ptr,
                      const char *key, size_t key_length,
                      size_t *value_length, 
                      uint32_t *flags,
                      memcached_return *error);

  memcached_return
  memcached_mget(memcached_st *ptr, 
                 char **keys, size_t *key_length, 
                 size_t number_of_keys);
  char *
  memcached_get_by_key(memcached_st *ptr, 
                       const char *master_key, size_t master_key_length, 
                       const char *key, size_t key_length, 
                       uint32_t user_spec_len,
                       size_t *value_length, 
                       uint32_t *flags,
                       memcached_return *error);

  memcached_return 
  memcached_mget_by_key(memcached_st *ptr, 
                        const char *master_key, size_t master_key_length,
                        char **keys, size_t *key_length, 
                        size_t number_of_keys,
                       uint32_t user_spec_len);

  char *memcached_fetch(memcached_st *ptr,
                        char *key, size_t *key_length, 
                        size_t *value_length,
                        uint32_t *flags, 
                        memcached_return *error);
  memcached_return 
  memcached_fetch_execute(memcached_st *ptr, 
                          memcached_return (*callback[])(memcached_st *ptr, memcached_result_st *result, void *context),
                          void *context,
                          unsigned int number_of_callbacks);

  char *
  memcached_get_len(memcached_st *ptr, 
                    const char *key, size_t key_length,
                    uint32_t user_spec_len,
                    size_t *value_length, 
                    uint32_t *flags,
                    memcached_return *error);

  memcached_return
  memcached_mget_len(memcached_st *ptr, 
                     const char **keys, size_t *key_length, 
                     size_t number_of_keys, uint32_t user_spec_len);

=head1 DESCRIPTION

memcached_get() is used to fetch an individual value from the server. You
must pass in a key and its length to fetch the object. You must supply
three pointer variables which will give you the state of the returned
object.  A uint32_t pointer to contain whatever flags you stored with the value,
a size_t pointer which will be filled with size of of the object, and a
memcached_return pointer to hold any error. The object will be returned
upon success and NULL will be returned on failure. Any object returned by
memcached_get() must be released by the caller application. 

memcached_get_len() is also used to fetch an individual value from the
server.  The only difference when compared to memcached_get() is that
the server will only send back the first n bytes of the value where n is
specified by the user.  Note that this command is only available when
using the ascii protocol.

memcached_mget() is used to select multiple keys at once. For multiple key
operations it is always faster to use this function. This function always
works asynchronously. memcached_fetch() is then used to retrieve any keys
found. No error is given on keys that are not found. You must call either
memcached_fetch() or memcached_fetch_result() after a successful call to
memcached_mget(). You should continue to call these functions until they
return NULL (aka no more values). If you need to quit in the middle of a
memcached_get() call, execute a memcached_quit(). After you do this, you can
issue new queries against the server.

memcached_mget_len() is also used to select multiple keys at once.  The
only difference when compared to memcached_mget() is that the server
will only send back the first n bytes of each value where n is
specified by the user.  Note that this command is only available when
using the ascii protocol.

memcached_fetch() is used to fetch an individual value from the server. 
memcached_mget() or memcached_mget_len() must always be called before
using this method.  You must pass in a key and its length to fetch the
object. You must supply three pointer variables which will give you the
state of the returned object.  A uint32_t pointer to contain whatever
flags you stored with the value, a size_t pointer which will be filled
with size of of the object, and a memcached_return pointer to hold any
error. The object will be returned upon success and NULL will be returned
on failure. MEMCACHD_END is returned by the *error value when all objects
that have been found are returned.  The final value upon MEMCACHED_END is
null. Values returned by memcached_fetch() musted be free'ed by the caller.

memcached_fetch_result() is used to return a memcached_result_st(3) structure 
from a memcached server. The result object is forward compatible with changes
to the server. For more information please refer to the memcached_result_st(3) 
help. This function will dynamically allocate a result structure for you
if you do not pass one to the function.

memcached_fetch_execute() is a callback function for result sets. Instead
of returning the results to you for processing, it passes each of the
result sets to the list of functions you provide. It passes to the function
a memcached_st that can be cloned for use in the called function (it can not 
be used directly). It also passes a result set which does not need to be freed.
Finally it passes a "context". This is just a pointer to a memory reference
you supply the calling function. Currently only one value is being passed
to each function call. In the future there will be an option to allow this
to be an array.

memcached_get_by_key() and memcached_mget_by_key() behave in a similar nature
as memcached_get() and memcached_mget(). The difference is that they take
a master key that is used for determining which server an object was stored
if key partitioning was used for storage.

All of the above functions are not supported when the C<MEMCACHED_BEHAVIOR_USE_UDP>
has been set. Executing any of these functions with this behavior on will result in 
C<MEMCACHED_NOT_SUPPORTED> being returned or, for those functions which do not return
a C<memcached_return>, the error function parameter will be set to 
C<MEMCACHED_NOT_SUPPORTED>.

=head1 RETURN

All objects returned must be freed by the calling application.
memcached_get(), memcached_get_len(), and memcached_fetch() will return
NULL on error. You must look at the value of error to determine what
the actual error was.

=head1 HOME

To find out more information please check:
L<http://tangent.org/552/libmemcached.html>

=head1 AUTHOR

Brian Aker, E<lt>brian@tangent.orgE<gt>

=head1 SEE ALSO

memcached(1) libmemcached(3) memcached_strerror(3)

=cut

