.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "..::docs::libmemcached_examples 3"
.TH ..::docs::libmemcached_examples 3 "2013-05-25" "" "libmemcached"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
libmemcached_examples \- Examples for libmemcached
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For full examples, test cases are found in tests/*.c in the main
distribution. These are always up to date, and are used for each test run of
the library.
.SS "Creating and Freeing structure"
.IX Subsection "Creating and Freeing structure"
.Vb 2
\&  memcached_st *memc;
\&  memcached_return rc;
\&
\&  memc= memcached_create(NULL);
\&  ...do stuff...
\&  memcached_free(memc);
.Ve
.PP
The above code would create a connection and then free the connection when
finished.
.SS "Connecting to servers"
.IX Subsection "Connecting to servers"
.Vb 3
\&  memcached_server_st *servers;
\&  memcached_st *memc= memcached_create(NULL);
\&  char servername[]= "0.example.com";
\&
\&  servers= memcached_server_list_append(NULL, servername, 400, &rc);
\&
\&  for (x= 0; x < 20; x++)
\&  {
\&    char buffer[SMALL_STRING_LEN];
\&
\&    snprintf(buffer, SMALL_STRING_LEN, "%u.example.com", 400+x);
\&    servers= memcached_server_list_append(servers, buffer, 401, &rc);
\&  }
\&  rc= memcached_server_push(memc, servers);
\&  memcached_server_free(servers);
\&  memcached_free(memc);
.Ve
.PP
In the above code you create a \f(CW\*(C`memcached_st\*(C'\fR object that you then feed in a
single host into. In the for loop you build a \f(CW\*(C`memcached_server_st\*(C'\fR
pointer that you then later feed via \fImemcached_server_push()\fR into the
\&\f(CW\*(C`memcached_st\*(C'\fR structure.
.PP
You can reuse the \f(CW\*(C`memcached_server_st\*(C'\fR object with multile \f(CW\*(C`memcached_st\*(C'\fR
structures.
.SS "Adding a value to the server"
.IX Subsection "Adding a value to the server"
.Vb 4
\&  char *key= "foo";
\&  char *value;
\&  size_t value_length= 8191;
\&  unsigned int x;
\&
\&  value = (char*)malloc(value_length);
\&  assert(value);
\&
\&  for (x= 0; x < value_length; x++)
\&  value[x] = (char) (x % 127);
\&
\&  for (x= 0; x < 1; x++)
\&  {
\&    rc= memcached_set(memc, key, strlen(key), 
\&    value, value_length,
\&    (time_t)0, (uint32_t)0);
\&    assert(rc == MEMCACHED_SUCCESS);
\&  }
\&
\&  free(value);
.Ve
.PP
It is best practice to always look at the return value of any operation.
.SS "Fetching multiple values"
.IX Subsection "Fetching multiple values"
.Vb 5
\&  memcached_return rc;
\&  char *keys[]= {"fudge", "son", "food"};
\&  size_t key_length[]= {5, 3, 4};
\&  unsigned int x;
\&  uint32_t flags;
\&
\&  char return_key[MEMCACHED_MAX_KEY];
\&  size_t return_key_length;
\&  char *return_value;
\&  size_t return_value_length;
\&
\&  rc= memcached_mget(memc, keys, key_length, 3);
\&
\&  x= 0;
\&  while ((return_value= memcached_fetch(memc, return_key, &return_key_length, 
\&                                        &return_value_length, &flags, &rc)))
\&  {
\&    free(return_value);
\&    x++;
\&  }
.Ve
.PP
Notice that you freed values returned from \fImemcached_fetch()\fR. The define
\&\f(CW\*(C`MEMCACHED_MAX_KEY\*(C'\fR is provided for usage.
.SH "HOME"
.IX Header "HOME"
To find out more information please check:
<http://tangent.org/552/libmemcached.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Aker, <brian@tangent.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fImemcached\fR\|(1)
