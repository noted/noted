.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "..::docs::memcached_callback 3"
.TH ..::docs::memcached_callback 3 "2013-05-25" "" "libmemcached"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
memcached_callback_get, memcached_callback_set \- Get and set a callback
.SH "LIBRARY"
.IX Header "LIBRARY"
C Client Library for memcached (libmemcached, \-lmemcached)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <memcached.h>
\&
\&  memcached_return 
\&    memcached_callback_set (memcached_st *ptr, 
\&                            memcached_callback flag, 
\&                            void *data);
\&
\&  void *
\&    memcached_callback_get (memcached_st *ptr, 
\&                            memcached_callback flag,
\&                            memcached_return *error);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIlibmemcached\fR\|(3) can have callbacks set key execution points. These either
provide function calls at points in the code, or return pointers to
structures for particular usages.
.PP
\&\fImemcached_callback_get()\fR takes a callback flag and returns the structure or
function set by \fImemcached_callback_set()\fR.
.PP
\&\fImemcached_callback_set()\fR changes the function/structure assigned by a
callback flag. No connections are reset.
.PP
You can use \s-1MEMCACHED_CALLBACK_USER_DATA\s0 to provide custom context if required for any 
of the callbacks
.IP "\s-1MEMCACHED_CALLBACK_CLEANUP_FUNCTION\s0" 4
.IX Item "MEMCACHED_CALLBACK_CLEANUP_FUNCTION"
When \fImemcached_delete()\fR is called this function will be excuted. At the
point of its execution all connections have been closed.
.IP "\s-1MEMCACHED_CALLBACK_CLONE_FUNCTION\s0" 4
.IX Item "MEMCACHED_CALLBACK_CLONE_FUNCTION"
When \fImemcached_delete()\fR is called this function will be excuted. At the
point of its execution all connections have been closed.
.IP "\s-1MEMCACHED_CALLBACK_PREFIX_KEY\s0" 4
.IX Item "MEMCACHED_CALLBACK_PREFIX_KEY"
You can set a value which will be used to create a domain for your keys.
The value specified here will be prefixed to each of your keys. The value can not
be greater then \s-1MEMCACHED_PREFIX_KEY_MAX_SIZE\s0 \- 1 and will reduce \s-1MEMCACHED_MAX_KEY\s0 by
the value of your key. The prefix key is only applied to the primary key,
not the master key. \s-1MEMCACHED_FAILURE\s0 will be returned if no key is set. In the case
of a key which is too long \s-1MEMCACHED_BAD_KEY_PROVIDED\s0 will be returned.
.IP "\s-1MEMCACHED_CALLBACK_USER_DATA\s0" 4
.IX Item "MEMCACHED_CALLBACK_USER_DATA"
This allows you to store a pointer to a specifc piece of data. This can be
retrieved from inside of \fImemcached_fetch_execute()\fR. Cloning a memcached_st
will copy the pointer to the clone.
.IP "\s-1MEMCACHED_CALLBACK_MALLOC_FUNCTION\s0" 4
.IX Item "MEMCACHED_CALLBACK_MALLOC_FUNCTION"
\&\s-1DEPRECATED:\s0 use memcached_set_memory_allocators instead.
.IP "\s-1MEMCACHED_CALLBACK_REALLOC_FUNCTION\s0" 4
.IX Item "MEMCACHED_CALLBACK_REALLOC_FUNCTION"
\&\s-1DEPRECATED:\s0 use memcached_set_memory_allocators instead.
.IP "\s-1MEMCACHED_CALLBACK_FREE_FUNCTION\s0" 4
.IX Item "MEMCACHED_CALLBACK_FREE_FUNCTION"
\&\s-1DEPRECATED:\s0 use memcached_set_memory_allocators instead.
.IP "\s-1MEMCACHED_CALLBACK_GET_FAILURE\s0" 4
.IX Item "MEMCACHED_CALLBACK_GET_FAILURE"
This function implements the read through cache behavior. On failure of retrieval this callback will be called. 
You are responsible for populating the result object provided. This result object will then be stored in the server and
returned to the calling process. You must clone the memcached_st in order to
make use of it. The value will be stored only if you return
\&\s-1MEMCACHED_SUCCESS\s0 or \s-1MEMCACHED_BUFFERED\s0. Returning \s-1MEMCACHED_BUFFERED\s0 will
cause the object to be buffered and not sent immediatly (if this is the default behavior based on your connection setup this will happen automatically).
.Sp
The prototype for this is:
memcached_return (*memcached_trigger_key)(memcached_st *ptr, char *key, size_t key_length, memcached_result_st *result);
.IP "\s-1MEMCACHED_CALLBACK_DELETE_TRIGGER\s0" 4
.IX Item "MEMCACHED_CALLBACK_DELETE_TRIGGER"
This function implements a trigger upon successful deletion of a key. The memcached_st structure will need to be cloned
in order to make use of it.
.Sp
The prototype for this is:
typedef memcached_return (*memcached_trigger_delete_key)(memcached_st *ptr, char *key, size_t key_length);
.SH "RETURN"
.IX Header "RETURN"
\&\fImemcached_callback_get()\fR return the function or structure that was provided.
Upon error, nothing is set, null is returned, and the memcached_return
argument is set to \s-1MEMCACHED_FAILURE\s0.
.PP
\&\fImemcached_callback_set()\fR returns \s-1MEMCACHED_SUCCESS\s0 upon successful setting,
otherwise \s-1MEMCACHED_FAILURE\s0 on error.
.SH "HOME"
.IX Header "HOME"
To find out more information please check:
<http://tangent.org/552/libmemcached.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Aker, <brian@tangent.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fImemcached\fR\|(1) \fIlibmemcached\fR\|(3) \fImemcached_strerror\fR\|(3)
